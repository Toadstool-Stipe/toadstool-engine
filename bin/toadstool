#!/usr/bin/env ruby
# encoding: utf-8

require "rubygems"
require "thor"
require "thor/group"
require 'pathname'

APP_PATH = File.expand_path(File.join(__FILE__, '../../templates'))

module Toadstool
  class Generator < Thor
    def self.source_root
      APP_PATH
    end

    include Thor::Actions
    argument :category
    argument :name

    desc 'ts_module', "Generate a module"
    def ts_module
      directory "module/views", "views/modules/#{category}"
      directory "module/sass", "sass/modules/#{category}"

      append_file 'sass/_modules.scss', "@import 'modules/#{category}/#{name}/#{name}'"
    end

    desc 'pattern', "Generate a module"
    def pattern
      directory "pattern/views", "views/ui_patterns/#{category}"
      directory "pattern/sass", "sass/ui_patterns/#{category}"

      append_file 'sass/_ui_patterns.scss', "@import 'ui_patterns/#{category}/#{name}/#{name}'"
    end

    no_tasks do
      def module_name
        "#{name}"
      end

      def pattern_name
        "#{name}"
      end
    end

    map 'module' => 'ts_module'
  end
end




ARGV << '--help' if ARGV.empty?

aliases = {
  "g"  => "generate"
}


help_message = <<-EOT
Usage: toadstool COMMAND [ARGS]

The most common toadstool commands are:
  generate (module|pattern) CATEGORY NAME     Generate a new module or pattern
                                              "generate module sign-in form" would
                                              create style and markup files such as:
                                              sass/modules/sign-in/form/_mixins.sass
                                              and views/modules/sign-in/_form.html
EOT

command = ARGV.shift
command = aliases[command] || command

case command
when 'generate'
  Toadstool::Generator.start
else
  puts "Error: Command '#{command}' not recognized"
  if %x{rake #{command} --dry-run 2>&1 } && $?.success?
    puts "Did you mean: `$ rake #{command}` ?\n\n"
  end
  puts help_message
  exit(1)
end